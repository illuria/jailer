#!/bin/sh

jail::list(){
  local _json _format _style="text"
  local _hostname _ipaddr _state _jid _gateway

  while getopts j _opt; do
    case ${_opt} in
      j) _json="json" ;;
    esac
  done
  shift $((OPTIND - 1))

  _jformact='{:name}^{:state}^{:jid}^{:hostname}^{:ipv4}^{:gateway}\n'
  _jformstp='{:name}^{:state}\n'
  {
    [ ! -z ${_json} ]  && printf '[' || xo "${_jformact}" "NAME" "STATE" "JID" "HOSTNAME" "IPv4" "GW"
    _jail_list=$(sysrc -n jail_list)
    _jail_conf_dir=$(for _j in $(find /etc/jail.conf.d -name '*.conf'); do basename ${_j} | sed 's/\.conf$/ /'; done)
    _jls=$(jls name)
    _all_jails=$( printf "%s\n" ${_jail_list} ${_jail_conf_dir} ${_jls} | sort -u)
    for _j in ${_all_jails};
      do
        if jls -j ${_j} jid > /dev/null 2>&1 ; then
          _hostname=$(jexec ${_j} hostname)
          if [ "$(jls -j ${_j} vnet)" = "new" ]; then
            _ipaddr=$(jexec ${_j} ifconfig -f inet:cidr $(jexec ${_j} ifconfig -g epair | head -1) | awk '/inet / {print $2}')
            _gateway=`(jexec ${_j} route -n get default 2>/dev/null || echo "gateway: -")  | awk '/gateway/ {print $2}'`
          else
            _ipaddr=$(jls -j ${_j} ip4.addr)
            _gateway="-"
          fi
          _state="Active"
          _jid=$(jls -j ${_j} jid)
          _format="${_jformact}"
        else
          _state="Stopped"
          _format="${_jformstp}"
        fi
        [ ! -z ${_json} ] && _style="json" && printf "{"
        xo --style "${_style}" "${_format}" "${_j}" "${_state}" "${_jid}" "${_hostname}" "${_ipaddr}" "${_gateway}"
        [ ! -z ${_json} ] && printf "}"
      done
    [ ! -z ${_json} ] && printf ']\n'
  } | ( [ ! -z ${_json} ] && sed -e "s/}{/},{/g" || column -ts^ )
}

jail::info(){
  local _json _format _style="text"
  local _hostname _ipaddr _state _jid _gateway _netmask

  while getopts j _opt; do
    case ${_opt} in
      j) _json="json" ;;
    esac
  done
  shift $((OPTIND - 1))

  _jname="${1}"

  _jformact='Name: {:name}\nState: {:state}\nJID: {:jid}\nHostname: {:hostname}\nIPv4: {:ipv4}\nNetmask: {:netmask}\nGateway: {:gateway}\n'
  _jformstp='Name: {:name}\nState: {:state}\n'

  if service jail config ${_jname} >/dev/null 2>&1 ; then
    if jls -j ${_jname} > /dev/null 2>&1 ; then
      _hostname=$(jexec ${_jname} hostname)
      _jid=$(jls -j ${_jname} jid)
      _ipaddr=$(jexec ${_jname} ifconfig -f inet:dotted $(jexec ${_jname} ifconfig -g epair | head -1) | awk '/inet / {print $2}')
      _gateway=$(jexec ${_jname} route -n get default 2>/dev/null | awk '/gateway/ {print $2; exit;}')
      _netmask=$(jexec ${_jname} ifconfig -f inet:dotted $(jexec ${_jname} ifconfig -g epair | head -1) | awk '/netmask/ {print $4}')
      _state="Active"
      _format="${_jformact}"
    else
      _state="Stopped"
      _format="${_jformstp}"
    fi
  else
    _state="Not found"
    _format="${_jformstp}"
  fi

  [ ! -z ${_json} ] && _style="json" && printf "{"
  xo --style "${_style}" "${_format}" "${_jname}" "${_state}" "${_jid}" "${_hostname}" "${_ipaddr}" "${_netmask}" "${_gateway}"
  [ ! -z ${_json} ] && _style="json" && printf "}"
}

jail::get_next_id(){
  /usr/libexec/flua ${LIB}/lua/get_next_id.lua
}

jail::start(){
  for _name in $@; do
    printf "Starting ${_name}: "
    service jail start ${_name} > /dev/null 2>&1
    jls -j ${_name} >/dev/null 2>&1 && printf "${COLOUR_SET_G}Done!${COLOUR_END}\n" \
                 || (printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n") && return 1
  done
}

jail::stop(){
  for _name in $@; do
    printf "Stopping ${_name}: "
    if (jls -j ${_name} > /dev/null 2>&1); then
      if service jail stop ${_name} > /dev/null 2>&1 ; then
        > /dev/null 2>&1 \
        umount ${jailer_dir}/${_name}/dev
        printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
      else
        printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n"
      fi
    else
      printf "${COLOUR_SET_R}${_name} is not an active jail${COLOUR_END}\n"
    fi
  done
}

jail::destroy(){
  local _name _opt

  while getopts f _opt; do
    case ${_opt} in
      f) _force="-f" ;;
    esac
  done
  shift $((OPTIND - 1))

  _name="${1:-help}"
  [ ${_name} = "help" ] && help::destroy

  printf "Destroying ${_name}: "

  if jls -j ${_name} > /dev/null 2>&1; then
    jail::stop ${_name} > /dev/null 2>&1
  fi

  if ! zfs list ${JAILER_ZFS_DATASET}/${_name} > /dev/null 2>&1; then
    printf "${COLOUR_SET_R}Failed! (does not exist)${COLOUR_END}\n"
  else
    jail::_destroyzfs ${_name} ${_force}

    rm /etc/jail.conf.d/${_name}.conf > /dev/null 2>&1
    printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
  fi
}

jail::_destroyzfs(){
  local _name="$1"
  local _force="$2"
  sleep 1
  zfs destroy ${_force} -r ${JAILER_ZFS_DATASET}/${_name} || util::err "ZFS Destroy error, please check dataset dependency"
}

jail::image::extract(){
  local version=$1
  mkdir -p ${jailer_dir}/image/dist-files
  : ${FreeBSD_mirror:="https://download.FreeBSD.org/ftp"}
  if ! ([ -e ${jailer_dir}/image/dist-files/base-${_version}.txz ] &&   \
        jail::image::_checksum ${_version}); then
    if ! (fetch -qo ${jailer_dir}/image/dist-files/base-${_version}.txz \
       ${FreeBSD_mirror}/releases/${UNAME_m}/${_version}/base.txz &&    \
       jail::image::_checksum ${_version}); then
      jail::exception::image
      return 1
    fi
  fi
  if [ -d ${jailer_dir}/image/${_version} ]; then
    tar -xf ${jailer_dir}/image/dist-files/base-${_version}.txz -C \
      ${jailer_dir}/image/${_version}/
  fi
}

jail::image::_checksum(){
  local _version=$1
  sha256 -qc \
    $(fetch -o - \
     ${FreeBSD_mirror}/releases/${UNAME_m}/${_version}/MANIFEST |
     grep base.txz | cut -f 2)                                                     \
    ${jailer_dir}/image/dist-files/base-${_version}.txz > /dev/null
}

jail::image(){
  if [ $# -eq 0 ]; then
    _errormsg=$(cat <<EOF
Insufficient number of arguments: Needs one of the following subcommands:

    1. jailer image fetch [version] -> fetch either the specified
                                       version or the host's version

    2. jailer image list [version]  -> list either all fetched images
                                       or the one specified if exists

    3. jailer image use [version]   -> set the specified version as
                                       the default version to use, or
                                       return the default version if
                                       no argument is passed
                                       (not yet fully implemented)
EOF
)
    util::err "$_errormsg"
  fi
  case $1 in
    "fetch") jail::image::fetch "$@" ;;
    "list")  jail::image::list  "$@" ;;
    "use")   jail::image::use   "$@" ;;
    *) util::err "Unknown argument"  ;;
  esac
}

# XXX: Fetch command does not check if the specified (or inferred)
# version is already fetched and is in place at the moment, and
# has to be fixed ASAP.
jail::image::fetch(){
  local _maxver _version

  _maxver=$(freebsd-version -k | cut -d '-' -f 1 | tr -d '.')

  shift
  if [ $# -eq 0 ]; then
    _version=$(freebsd-version -k)
    _version=${_version%%-p*}

    jail::image list ${_version} >/dev/null && echo 'Image already exists!' && exit 1;

    zfs create -p ${JAILER_ZFS_DATASET}/image/${_version}
    printf "Fetching $_version: "
    jail::image::extract ${_version} >/dev/null 2>&1  &&
    zfs snap ${JAILER_ZFS_DATASET}/image/${_version}@base
    [ $? -eq 0 ] && printf "${COLOUR_SET_G}Done!${COLOUR_END}\n" \
                 || (printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n" && exit 1)
  elif [ $# -eq 1 ]; then
    _version="${1}"

    # Sanity check
    [ $(echo $_version | cut -d '-' -f 1 | tr -d '.') -gt $_maxver ] &&
      util::err "The specified version cannot be greater than the host's kernel version"
    jail::image list ${_version} >/dev/null && echo 'Image already exists!' && exit 1;
    zfs create -p ${JAILER_ZFS_DATASET}/image/${_version}
    printf "Fetching $_version: "
    jail::image::extract ${_version} >/dev/null 2>&1  &&
    zfs snap ${JAILER_ZFS_DATASET}/image/${_version}@base
    [ $? -eq 0 ] && printf "${COLOUR_SET_G}Done!${COLOUR_END}\n" \
                 || (printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n" && exit 1)
  else
    util::err "Image fetch command takes at most one argument"
  fi
}

jail::image::list(){
  local _default_images

  _default_image=$(jailer image use 2>/dev/null)

  shift
  if [ $# -eq 0 ]; then
    zfs list -t snap -Ho name -r ${JAILER_ZFS_DATASET}/image 2>/dev/null |
      awk -v default_image="$_default_image"    \
          '{
             sub(/.*image\//,""); sub(/@.*$/,"");
             if ($0 == default_image) {
               print "* " $0
             } else print "  " $0
           }'
    return 0
  elif [ $# -eq 1 ]; then
    if [ $1 = "remote" ]; then
      : ${FreeBSD_mirror:="https://download.FreeBSD.org/ftp"}
      fetch -qo - ${FreeBSD_mirror}/releases/${UNAME_m} |
        sed -n -e 's/<\/*[^>]*>//g' -e 's/\(.*RELEASE\).*/  \1/p'
    else
      (zfs list -t snap -Ho name -r ${JAILER_ZFS_DATASET}/image 2>/dev/null |
       awk '{ sub(/.*image\//,""); sub(/@.*$/,""); print }' | grep -Fx $1) &&
       return 0 || return 1
    fi
  else
    util::err "Image list command takes at most one argument"
  fi
}

# XXX: Currently there is no support for default images,
# but I will go over it ASAP
jail::image::use(){
  local _use_file

  _use_file="${jailer_dir}/image/.default"

  shift
  if [ $# -eq 0 ]; then
    [ -f $_use_file ] && cat $_use_file ||
      echo "No default image set" >&2
  elif [ $# -eq 1 ]; then
    jailer image list $1 >/dev/null && echo $1 > $_use_file ||
      util::err "No such an image"
  else
    util::err "\`image use\` subcommand takes at most one argument"
  fi
}

jail::network::use(){
  _nettype_file="${jailer_dir}/.default_nettype"

  shift
  if [ $# -eq 0 ]; then
    [ -f $_nettype_file ] && cat $_nettype_file ||
      echo "No default network type" >&2
  elif [ $# -eq 1 ]; then
    if [ $1 = "eb" -o $1 = "ng" -o $1 = "new" -o $1 = "inherit" ]; then
      echo $1 > $_nettype_file
    else
      util::err "\`$1\` not a valid network type."
    fi
  else
    util::err "\`network use\` subcommand takes at most one argument"
  fi
}

jail::network(){
  if [ $# -eq 0 ]; then
    help::network
  fi
  case $1 in
    use) jail::network::use "$@"      ;;
    *)   util::err "Unknown argument" ;;
  esac
}

set_eb_vars(){
  _netvars=$(cat <<EOF
  vnet;
  allow.raw_sockets;
  vnet.interface = "epair\${id}b";

  exec.prestart   = "ifconfig epair\${id} create up";
  exec.prestart  += "ifconfig epair\${id}a up descr vnet-\${name}";
  exec.prestart  += "ifconfig \${bridge} addm epair\${id}a up";

  exec.start      = "/sbin/ifconfig lo0 127.0.0.1 up";
  exec.start     += "/bin/sh /etc/rc";

  exec.stop       = "/bin/sh /etc/rc.shutdown jail";
  exec.poststop   = "ifconfig \${bridge} deletem epair\${id}a";
  exec.poststop  += "ifconfig epair\${id}a destroy";

  mount.devfs;

EOF
)
}

set_new_vars(){
  [ -z "${_bridge}" ] && util::err "When using -t new, an interface should be assigned with -b"
  [ -z "${_addr}" ]   && net::get_avail_addr "${_bridge}"
  _netvars=$(cat <<EOF

  allow.raw_sockets;
  interface       = \${bridge};
  ip4.addr        = ${_addr};
  exec.start      = "/bin/sh /etc/rc";
  exec.stop       = "/bin/sh /etc/rc.shutdown jail";

  mount.devfs;

EOF
)
}

set_inherit_vars(){
  _netvars=$(cat <<EOF
  ip4             = "inherit";
  allow.raw_sockets;
  exec.start      = "/bin/sh /etc/rc";
  exec.stop       = "/bin/sh /etc/rc.shutdown jail";

  mount.devfs;

EOF
)
}

jail::create(){
  local _name _id _path
  local _version _snap
  local _vnet _addr _gw _netmask _resolver
  local _bridge _domain=${HOSTNAME}
  local _silent _dry_run _output

  while getopts :a:b:c:d:e:f:g:m:nr:s:t:D _opt; do
    case ${_opt} in
      a) _addr="${OPTARG}" ;;
      b) _bridge="${OPTARG}" ;;
      d) _domain="${OPTARG}" ;;
      e) _resolver="${OPTARG}" ;;
      g) _gw="${OPTARG}" ;;
      m) _netmask="${OPTARG}" ;;
      n) _silent="yes" ;;
      r) _version="${OPTARG}" ;;
      s) _snap="${OPTARG}" ;;
      t) _vnet="${OPTARG}" ;;
      D) _dry_run="yes";;
      *) util::usage ;;
    esac
  done
  shift $((OPTIND - 1))

  _name="${1:-$(uuidgen | cut -d '-' -f 1)}"
  _id=$(jail::get_next_id)
  _path=${jailer_dir}/${_name}
  _default_image=$(jail::image::use 2>/dev/null)
  _default_nettype=$(jail::network::use 2>/dev/null)

  [ "${_name}" = "help" ] && help::create
  _output="/etc/jail.conf.d/${_name}.conf"
  [ "${_dry_run}" = "yes" ] && _output="/dev/stdout"

  if [ -z "${_version}" -a -z "${_snap}" ]; then
    if [ ! -z "${_default_image}" ]; then
      _version=${_default_image}
    else
      _version=$(uname -r)
      _version=${_version%%-p*}
      jail::image list ${_version} >/dev/null || jail::image fetch
    fi
  fi

  # Sanity Checks
  if [ -e /etc/jail.conf.d/${_name}.conf ]; then
    util::err "${_name} already exists"
  fi
  if [ ! -d ${jailer_dir}/image/${_version} ]; then
    util::err "${_version} does not exist, try \`image fetch ${_version}\` first?"
  fi

  # Check the VNET (default) type, can be inherit, new, eb or ng
  if [ -z "${_vnet}" ]; then
    if [ -n "${_default_nettype}" ]; then
      _vnet=${_default_nettype}
    else
      _vnet="inherit"
    fi
  fi
  [ "${_vnet}" = "ng" ] && util::err "Netgraph is current not supported."
  # First, we check for Gateway and Netmask; If not set, we get it from the bridge
  if [ "${_vnet}" = "eb" ];
  then
    [ -z "${_addr}" ]    && _addr="dhcp"
    [ -z "${_bridge}" ]  && _bridge="bridge0"
    [ -z "${_gw}" ]      && _gw=$(ifconfig -f inet:dotted ${_bridge} | awk '/inet/ {print $2; exit;}')
    [ -z "${_netmask}" ] && _netmask=$(ifconfig -f inet:dotted ${_bridge} | awk '/inet/ {print $4; exit;}')
  fi

  if [ "${_vnet}" = "eb" -o "${_vnet}" = "ng" ];
  then
    _setmac=1
    _macaddr=$(openssl rand -hex 6 | sed -r 's/^(.{6}).*$/\1/; s/([0-9a-f]{2})/\1:/g; s/:$//; s/^/58:9c:fc:/;')
    _devfsvars=$(cat <<EOF
  devfs_ruleset   = 10;
EOF
)
  fi

  case "${_vnet}" in
    eb)       set_eb_vars ;;
    ng)       set_ng_vars ;;
    new)      set_new_vars ;;
    inherit)  set_inherit_vars ;;
    *)     util::err "-t ${_vnet}?? Wait, is there a network type we're not aware of?" ;;
  esac

  # Creation begins ...
  if [ "${_dry_run}" = "yes" ]; then
    printf "${COLOUR_SET_B}jail.conf file =>${COLOUR_END}\n"
  else
    printf "Creating ${_name}: "
  fi

  # Generate the configuration file
  cat << EOF > $_output
# vim: set syntax=sh:
exec.clean;

${_name} {
  \$id             = "${_id}";
${_devfsvars}
  \$bridge         = "${_bridge}";
  \$domain         = "${_domain}";
${_netvars}

  host.hostname   = "\${name}.\${domain}";
  path            = "${_path}";
  exec.consolelog = "/var/log/jail/\${name}.log";
  persist;
}
EOF

  # ZFS
  if [ ! -z ${_snap} ]; then
    _zfscmd="
  (zfs send ${JAILER_ZFS_DATASET}/${_snap} |
   zfs recv ${JAILER_ZFS_DATASET}/${_name})
    "
  else
    _zfscmd="
  (zfs send ${JAILER_ZFS_DATASET}/image/${_version}@base |
   zfs recv ${JAILER_ZFS_DATASET}/${_name})
    "
  fi
  if [  "${_dry_run}" != "yes" ]; then
    eval "${_zfscmd}"
  else
    printf "${COLOUR_SET_B}ZFS commands =>${COLOUR_END}\n"
    echo "${_zfscmd}"
  fi

  # Set the resolver
  if [ ! -z ${_resolver} ]; then
    _resolvcmd=$(cat <<EOF
  echo "nameserver ${_resolver}" > "${_path}/etc/resolv.conf"
EOF
)
  else
    _resolvcmd=$(cat <<EOF
  cp /etc/resolv.conf ${_path}/etc/resolv.conf
EOF
)
  fi
  if [ "${_dry_run}" != "yes" ]; then
    eval "${_resolvcmd}"
  else
    printf "${COLOUR_SET_B}Resolver commands =>${COLOUR_END}\n"
    echo "${_resolvcmd}"
  fi

  # Set MAC address if using dhcp
  if [ "${_addr}" = "dhcp" -a "${_vnet}" = "eb" ]; then
    _netcmd=$(cat <<EOF
  echo "ifconfig epair${_id}b ether ${_macaddr}" > ${_path}/etc/start_if.epair${_id}b
  sysrc -q -f ${_path}/etc/rc.conf ifconfig_epair${_id}b="SYNCDHCP"
EOF
)
  # Otherwise use the provided address
  elif [ "${_vnet}" = "eb" ]; then
    _netcmd=$(cat <<EOF
  sysrc -q -f ${_path}/etc/rc.conf ifconfig_epair${_id}b="inet ${_addr} netmask ${_netmask} up"
  sysrc -q -f ${_path}/etc/rc.conf defaultrouter="${_gw}"
EOF
)
  fi
  if [ "${_dry_run}" != "yes" ]; then
    > /dev/null 2>&1 \
    eval "${_netcmd}"
  else
    printf "${COLOUR_SET_B}Network setup commands =>${COLOUR_END}\n"
    echo "${_netcmd}"
  fi

  # Set silent if required
  if [ ! -z ${_silent} ]; then
    _sysrcncmd=$(cat <<EOF
  sysrc -q -f ${_path}/etc/rc.conf cron_enable="NO"
EOF
)
  fi
  # ALWAYS disable sendmail and secure syslogd
  _sysrccmd=$(cat <<EOF
  sysrc -q -f ${_path}/etc/rc.conf sendmail_enable="NONE" syslogd_flags="-ss"
EOF
)
  if [ "${_dry_run}" != "yes" ]; then
    > /dev/null 2>&1 \
    eval "${_sysrcncmd}"
    > /dev/null 2>&1 \
    eval "${_sysrccmd}"
  else
    printf "${COLOUR_SET_B}Post-Installation =>${COLOUR_END}\n"
    echo "${_sysrccmd}"
    echo "${_sysrcncmd}"
  fi



  if [ "${_dry_run}" != "yes" ]; then
    >/dev/null 2>&1 \
    jail::start ${_name}
    >/dev/null 2>&1 \
    jls -j ${_name} || (printf "${COLOUR_SET_R}Failed!${COLOUR_END}\n" && jail::exception::create )
    printf "${COLOUR_SET_G}Done!${COLOUR_END}\n"
  fi
}

jail::console() {
  local _name="$1"
  jail::checkexists ${_name}
  jexec -l ${_name}
}

jail::edit() {
  : ${EDITOR:=vi}

  [ $# -lt 1 ] && help::edit

  local _name="$1"

  [ ${_name} = "help" ] && help::edit

  local _file="/etc/jail.conf.d/${_name}.conf"
  if [ ! -e ${_file} ]; then
    util::err "Configuration file for ${_name} does not exist"
  fi
  ${EDITOR} ${_file}
}

jail::checkexists(){
  _name="${1}"
  jls -j ${_name} > /dev/null 2>&1 || util::err "Jail ${_name} does not exist. Use 'jailer list'"
}
